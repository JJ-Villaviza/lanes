/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as AuthenticationRouteImport } from './routes/_authentication'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedTransactionRouteImport } from './routes/_protected/transaction'
import { Route as ProtectedQueueRouteImport } from './routes/_protected/queue'
import { Route as ProtectedDashboardRouteImport } from './routes/_protected/dashboard'
import { Route as ProtectedBranchesRouteImport } from './routes/_protected/branches'
import { Route as AuthenticationRegisterRouteImport } from './routes/_authentication/register'
import { Route as AuthenticationLoginRouteImport } from './routes/_authentication/login'
import { Route as AuthenticationForgetPasswordRouteImport } from './routes/_authentication/forget-password'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticationRoute = AuthenticationRouteImport.update({
  id: '/_authentication',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedTransactionRoute = ProtectedTransactionRouteImport.update({
  id: '/transaction',
  path: '/transaction',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedQueueRoute = ProtectedQueueRouteImport.update({
  id: '/queue',
  path: '/queue',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedDashboardRoute = ProtectedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedBranchesRoute = ProtectedBranchesRouteImport.update({
  id: '/branches',
  path: '/branches',
  getParentRoute: () => ProtectedRoute,
} as any)
const AuthenticationRegisterRoute = AuthenticationRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthenticationRoute,
} as any)
const AuthenticationLoginRoute = AuthenticationLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthenticationRoute,
} as any)
const AuthenticationForgetPasswordRoute =
  AuthenticationForgetPasswordRouteImport.update({
    id: '/forget-password',
    path: '/forget-password',
    getParentRoute: () => AuthenticationRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/forget-password': typeof AuthenticationForgetPasswordRoute
  '/login': typeof AuthenticationLoginRoute
  '/register': typeof AuthenticationRegisterRoute
  '/branches': typeof ProtectedBranchesRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/queue': typeof ProtectedQueueRoute
  '/transaction': typeof ProtectedTransactionRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/forget-password': typeof AuthenticationForgetPasswordRoute
  '/login': typeof AuthenticationLoginRoute
  '/register': typeof AuthenticationRegisterRoute
  '/branches': typeof ProtectedBranchesRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/queue': typeof ProtectedQueueRoute
  '/transaction': typeof ProtectedTransactionRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authentication': typeof AuthenticationRouteWithChildren
  '/_protected': typeof ProtectedRouteWithChildren
  '/about': typeof AboutRoute
  '/_authentication/forget-password': typeof AuthenticationForgetPasswordRoute
  '/_authentication/login': typeof AuthenticationLoginRoute
  '/_authentication/register': typeof AuthenticationRegisterRoute
  '/_protected/branches': typeof ProtectedBranchesRoute
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/_protected/queue': typeof ProtectedQueueRoute
  '/_protected/transaction': typeof ProtectedTransactionRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/forget-password'
    | '/login'
    | '/register'
    | '/branches'
    | '/dashboard'
    | '/queue'
    | '/transaction'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/forget-password'
    | '/login'
    | '/register'
    | '/branches'
    | '/dashboard'
    | '/queue'
    | '/transaction'
  id:
    | '__root__'
    | '/'
    | '/_authentication'
    | '/_protected'
    | '/about'
    | '/_authentication/forget-password'
    | '/_authentication/login'
    | '/_authentication/register'
    | '/_protected/branches'
    | '/_protected/dashboard'
    | '/_protected/queue'
    | '/_protected/transaction'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticationRoute: typeof AuthenticationRouteWithChildren
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AboutRoute: typeof AboutRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authentication': {
      id: '/_authentication'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/transaction': {
      id: '/_protected/transaction'
      path: '/transaction'
      fullPath: '/transaction'
      preLoaderRoute: typeof ProtectedTransactionRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/queue': {
      id: '/_protected/queue'
      path: '/queue'
      fullPath: '/queue'
      preLoaderRoute: typeof ProtectedQueueRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/branches': {
      id: '/_protected/branches'
      path: '/branches'
      fullPath: '/branches'
      preLoaderRoute: typeof ProtectedBranchesRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_authentication/register': {
      id: '/_authentication/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthenticationRegisterRouteImport
      parentRoute: typeof AuthenticationRoute
    }
    '/_authentication/login': {
      id: '/_authentication/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthenticationLoginRouteImport
      parentRoute: typeof AuthenticationRoute
    }
    '/_authentication/forget-password': {
      id: '/_authentication/forget-password'
      path: '/forget-password'
      fullPath: '/forget-password'
      preLoaderRoute: typeof AuthenticationForgetPasswordRouteImport
      parentRoute: typeof AuthenticationRoute
    }
  }
}

interface AuthenticationRouteChildren {
  AuthenticationForgetPasswordRoute: typeof AuthenticationForgetPasswordRoute
  AuthenticationLoginRoute: typeof AuthenticationLoginRoute
  AuthenticationRegisterRoute: typeof AuthenticationRegisterRoute
}

const AuthenticationRouteChildren: AuthenticationRouteChildren = {
  AuthenticationForgetPasswordRoute: AuthenticationForgetPasswordRoute,
  AuthenticationLoginRoute: AuthenticationLoginRoute,
  AuthenticationRegisterRoute: AuthenticationRegisterRoute,
}

const AuthenticationRouteWithChildren = AuthenticationRoute._addFileChildren(
  AuthenticationRouteChildren,
)

interface ProtectedRouteChildren {
  ProtectedBranchesRoute: typeof ProtectedBranchesRoute
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
  ProtectedQueueRoute: typeof ProtectedQueueRoute
  ProtectedTransactionRoute: typeof ProtectedTransactionRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedBranchesRoute: ProtectedBranchesRoute,
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  ProtectedQueueRoute: ProtectedQueueRoute,
  ProtectedTransactionRoute: ProtectedTransactionRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticationRoute: AuthenticationRouteWithChildren,
  ProtectedRoute: ProtectedRouteWithChildren,
  AboutRoute: AboutRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
